--- ./byterun/caml/alloc.h
+++ ./byterun/caml/alloc.h
@@ -60,15 +60,25 @@
 
 CAMLextern int caml_convert_flag_list (value, int *);
 
+#if defined(__cplusplus) || defined(_MSC_VER) || (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901)
+#define CAML_INLINE inline
+#elif defined(__GNUC__)
+#define CAML_INLINE __inline__
+#else
+#define CAML_INLINE
+#endif
+
 /* Convenience functions to deal with unboxable types. */
-static inline value caml_alloc_unboxed (value arg) { return arg; }
-static inline value caml_alloc_boxed (value arg) {
+static CAML_INLINE value caml_alloc_unboxed (value arg) { return arg; }
+static CAML_INLINE value caml_alloc_boxed (value arg) {
   value result = caml_alloc_small (1, 0);
   Field (result, 0) = arg;
   return result;
 }
-static inline value caml_field_unboxed (value arg) { return arg; }
-static inline value caml_field_boxed (value arg) { return Field (arg, 0); }
+static CAML_INLINE value caml_field_unboxed (value arg) { return arg; }
+static CAML_INLINE value caml_field_boxed (value arg) { return Field (arg, 0); }
+
+#undef CAML_INLINE
 
 /* Unannotated unboxable types are boxed by default. (may change in the
    future) */
--- ./byterun/caml/memory.h
+++ ./byterun/caml/memory.h
@@ -318,7 +318,7 @@
   #define CAMLunused_start __attribute__ ((unused))
   #define CAMLunused_end
   #define CAMLunused __attribute__ ((unused))
-#elif _MSC_VER >= 1500
+#elif defined(_MSC_VER) && _MSC_VER >= 1500
   #define CAMLunused_start  __pragma( warning (push) )           \
     __pragma( warning (disable:4189 ) )
   #define CAMLunused_end __pragma( warning (pop))
--- ./byterun/caml/misc.h
+++ ./byterun/caml/misc.h
@@ -55,7 +55,7 @@
   #define CAMLnoreturn_start
   #define CAMLnoreturn_end __attribute__ ((noreturn))
   #define Noreturn __attribute__ ((noreturn))
-#elif _MSC_VER >= 1500
+#elif defined(_MSC_VER) && _MSC_VER >= 1500
   #define CAMLnoreturn_start __declspec(noreturn)
   #define CAMLnoreturn_end
   #define Noreturn
--- ./byterun/fix_code.c
+++ ./byterun/fix_code.c
@@ -35,6 +35,10 @@
 #include "caml/mlvalues.h"
 #include "caml/reverse.h"
 
+#ifdef _WIN32
+#include <io.h>
+#endif
+
 code_t caml_start_code;
 asize_t caml_code_size;
 unsigned char * caml_saved_code;
@@ -60,7 +64,11 @@
 
   caml_code_size = len;
   caml_start_code = (code_t) caml_stat_alloc(caml_code_size);
+#ifdef _WIN32
+  if (_read(fd, (char *) caml_start_code, caml_code_size) != caml_code_size)
+#else
   if (read(fd, (char *) caml_start_code, caml_code_size) != caml_code_size)
+#endif
     caml_fatal_error("Fatal error: truncated bytecode file.\n");
   caml_init_code_fragments();
   /* Prepare the code for execution */
--- ./byterun/interp.c
+++ ./byterun/interp.c
@@ -1142,7 +1142,7 @@
 
 #ifndef THREADED_CODE
     default:
-#if _MSC_VER >= 1200
+#if defined(_MSC_VER) && _MSC_VER >= 1200
       __assume(0);
 #else
       caml_fatal_error_arg("Fatal error: bad opcode (%"
--- ./byterun/io.c
+++ ./byterun/io.c
@@ -47,6 +47,11 @@
 #define SEEK_END 2
 #endif
 
+#if defined(_WIN32)
+#include <io.h>
+#define lseek _lseeki64
+#endif
+
 /* Hooks for locking channels */
 
 CAMLexport void (*caml_channel_mutex_free) (struct channel *) = NULL;
--- ./config/Makefile.mingw
+++ ./config/Makefile.mingw
@@ -17,7 +17,7 @@
 
 ######### General configuration
 
-PREFIX=C:/ocamlmgw
+PREFIX=@PREFIX@
 
 ### Remove this to disable compiling ocamldebug
 WITH_DEBUGGER=ocamldebugger
@@ -32,7 +32,7 @@
 BYTERUN=ocamlrun
 
 ### Where to install the standard library
-LIBDIR=$(PREFIX)/lib
+LIBDIR=$(PREFIX)/lib/ocaml
 
 ### Where to install the stub DLLs
 STUBLIBDIR=$(LIBDIR)/stublibs
@@ -113,11 +113,11 @@
 
 ### Which C compiler to use for the bytecode interpreter.
 CC=$(TOOLPREF)gcc
-CFLAGS=-O -mms-bitfields -Wall -Wno-unused -fno-tree-vrp
+CFLAGS=-march=i686 -mtune=generic -O2 -mms-bitfields -Wall -Wno-unused -fno-tree-vrp
 # -fno-tree-vrp is here to try to work around the Skylake/Kaby lake bug,
 # and only works on GCC 4.2 and later.
 CPPFLAGS=-DCAML_NAME_SPACE -DUNICODE -D_UNICODE -DWINDOWS_UNICODE=$(WINDOWS_UNICODE)
-OCAMLC_CFLAGS=-O -mms-bitfields
+OCAMLC_CFLAGS=-march=i686 -mtune=generic -O2 -mms-bitfields
 
 BYTECCDBGCOMPOPTS=-g
 
@@ -128,7 +128,7 @@
 NATIVECCLIBS=-lws2_32 -lversion
 
 ### How to invoke the C preprocessor
-CPP=cpp
+CPP=$(TOOLPREF)cpp
 
 ### Flexlink
 FLEXLINK_CMD=flexlink
@@ -185,7 +185,7 @@
 ### Name of operating system family for the native-code compiler.
 SYSTEM=mingw
 
-OCAMLOPT_CFLAGS=-O -mms-bitfields
+OCAMLOPT_CFLAGS=-march=i686 -mtune=generic -O2 -mms-bitfields
 
 ### Build partially-linked object file
 PACKLD=$(TOOLPREF)ld -r -o # must have a space after '-o'
--- ./config/Makefile.mingw64
+++ ./config/Makefile.mingw64
@@ -17,7 +17,7 @@
 
 ######### General configuration
 
-PREFIX=C:/ocamlmgw64
+PREFIX=@PREFIX@
 
 ### Remove this to disable compiling ocamldebug
 WITH_DEBUGGER=ocamldebugger
@@ -32,7 +32,7 @@
 BYTERUN=ocamlrun
 
 ### Where to install the standard library
-LIBDIR=$(PREFIX)/lib
+LIBDIR=$(PREFIX)/lib/ocaml
 
 ### Where to install the stub DLLs
 STUBLIBDIR=$(LIBDIR)/stublibs
@@ -113,11 +113,11 @@
 
 ### Which C compiler to use for the bytecode interpreter.
 CC=$(TOOLPREF)gcc
-CFLAGS=-O -mms-bitfields -Wall -Wno-unused -fno-tree-vrp
+CFLAGS=-march=x86-64 -mtune=generic -O2 -mms-bitfields -Wall -Wno-unused -fno-tree-vrp
 # -fno-tree-vrp is here to try to work around the Skylake/Kaby lake bug,
 # and only works on GCC 4.2 and later.
 CPPFLAGS=-DCAML_NAME_SPACE -DUNICODE -D_UNICODE -DWINDOWS_UNICODE=$(WINDOWS_UNICODE)
-OCAMLC_CFLAGS=-O -mms-bitfields
+OCAMLC_CFLAGS=-march=x86-64 -mtune=generic -O2 -mms-bitfields
 
 BYTECCDBGCOMPOPTS=-g
 
@@ -128,7 +128,7 @@
 NATIVECCLIBS=-lws2_32 -lversion
 
 ### How to invoke the C preprocessor
-CPP=cpp
+CPP=$(TOOLPREF)cpp
 
 ### Flexlink
 FLEXLINK_CMD=flexlink
@@ -185,7 +185,7 @@
 ### Name of operating system family for the native-code compiler.
 SYSTEM=mingw64
 
-OCAMLOPT_CFLAGS=-O -mms-bitfields
+OCAMLOPT_CFLAGS=-march=x86-64 -mtune=generic -O2 -mms-bitfields
 
 ### Build partially-linked object file
 PACKLD=$(TOOLPREF)ld -r -o # must have a space after '-o'
--- ./config/Makefile.msvc
+++ ./config/Makefile.msvc
@@ -17,7 +17,7 @@
 
 ######### General configuration
 
-PREFIX=C:/ocamlms
+PREFIX=@PREFIX@
 
 ### Where to install the binaries.
 BINDIR=$(PREFIX)/bin
@@ -26,7 +26,7 @@
 BYTERUN=ocamlrun
 
 ### Where to install the standard library
-LIBDIR=$(PREFIX)/lib
+LIBDIR=$(PREFIX)/lib/ocaml
 
 ### Where to install the stub DLLs
 STUBLIBDIR=$(LIBDIR)/stublibs
--- ./config/Makefile.msvc64
+++ ./config/Makefile.msvc64
@@ -17,7 +17,7 @@
 
 ######### General configuration
 
-PREFIX=C:/ocamlms64
+PREFIX=@PREFIX@
 
 ### Where to install the binaries.
 BINDIR=$(PREFIX)/bin
@@ -26,7 +26,7 @@
 BYTERUN=ocamlrun
 
 ### Where to install the standard library
-LIBDIR=$(PREFIX)/lib
+LIBDIR=$(PREFIX)/lib/ocaml
 
 ### Where to install the stub DLLs
 STUBLIBDIR=$(LIBDIR)/stublibs
--- ./config/m-nt.h
+++ ./config/m-nt.h
@@ -41,7 +41,7 @@
 #define ARCH_UINT64_TYPE unsigned __int64
 #endif
 #define ARCH_INT64_PRINTF_FORMAT "I64"
-#if _MSC_VER >= 1800
+#if defined(_MSC_VER) && _MSC_VER >= 1800
 #define ARCH_SIZET_PRINTF_FORMAT "z"
 #else
 #define ARCH_SIZET_PRINTF_FORMAT "I"
--- ./debugger/main.ml
+++ ./debugger/main.ml
@@ -159,10 +159,12 @@
 let set_directory dir =
   Sys.chdir dir
 let print_version () =
+  Misc.mingw_binary_output ();
   printf "The OCaml debugger, version %s@." Sys.ocaml_version;
   exit 0;
 ;;
 let print_version_num () =
+  Misc.mingw_binary_output ();
   printf "%s@." Sys.ocaml_version;
   exit 0;
 ;;
--- ./driver/compenv.ml
+++ ./driver/compenv.ml
@@ -23,6 +23,7 @@
   Filename.remove_extension oname
 
 let print_version_and_library compiler =
+  Misc.mingw_binary_output ();
   Printf.printf "The OCaml %s, version " compiler;
   print_string Config.version; print_newline();
   print_string "Standard library directory: ";
@@ -30,9 +31,11 @@
   exit 0
 
 let print_version_string () =
+  Misc.mingw_binary_output ();
   print_string Config.version; print_newline(); exit 0
 
 let print_standard_library () =
+  Misc.mingw_binary_output ();
   print_string Config.standard_library; print_newline(); exit 0
 
 let fatal err =
--- ./driver/main.ml
+++ ./driver/main.ml
@@ -22,6 +22,7 @@
 let ppf = Format.err_formatter
 
 let show_config () =
+  Misc.mingw_binary_output ();
   Config.print_config stdout;
   exit 0;
 ;;
--- ./driver/makedepend.ml
+++ ./driver/makedepend.ml
@@ -535,11 +535,13 @@
 (* Entry point *)
 
 let print_version () =
+  Misc.mingw_binary_output ();
   Format.printf "ocamldep, version %s@." Sys.ocaml_version;
   exit 0;
 ;;
 
 let print_version_num () =
+  Misc.mingw_binary_output ();
   Format.printf "%s@." Sys.ocaml_version;
   exit 0;
 ;;
--- ./lex/main.ml
+++ ./lex/main.ml
@@ -23,12 +23,22 @@
 
 let usage = "usage: ocamllex [options] sourcefile"
 
+let mingw_binary_output () =
+  match Sys.os_type with
+  | "Win32" ->
+      (try set_binary_mode_out stdout true with _ -> ());
+      (try set_binary_mode_out stderr true with _ -> ());
+  | _ -> ()
+
+
 let print_version_string () =
+  mingw_binary_output ();
   print_string "The OCaml lexer generator, version ";
   print_string Sys.ocaml_version ; print_newline();
   exit 0
 
 let print_version_num () =
+  mingw_binary_output ();
   print_endline Sys.ocaml_version;
   exit 0;
 ;;
--- ./Makefile
+++ ./Makefile
@@ -586,12 +586,13 @@
 	cat stdlib/camlheader flexdll/flexlink.exe > \
 	  "$(INSTALL_BINDIR)/flexlink.exe"
 ifneq "$(filter-out mingw,$(TOOLCHAIN))" ""
+	$(MKDIR) "$(INSTALL_FLEXDLLDIR)"
 	$(INSTALL_DATA) flexdll/default$(filter-out _i386,_$(ARCH)).manifest \
-    "$(INSTALL_BINDIR)/"
+    "$(INSTALL_FLEXDLLDIR)/"
 endif
 	if test -n "$(wildcard flexdll/flexdll_*.$(O))" ; then \
 	  $(MKDIR) "$(INSTALL_FLEXDLLDIR)" ; \
-	  $(INSTALL_DATA) flexdll/flexdll_*.$(O) "$(INSTALL_FLEXDLLDIR)" ; \
+	  $(INSTALL_DATA) flexdll/flexdll.h flexdll/flexdll_*.$(O) "$(INSTALL_FLEXDLLDIR)" ; \
 	fi
 
 # Installation
--- ./ocamldoc/odoc_args.ml
+++ ./ocamldoc/odoc_args.ml
@@ -318,7 +318,10 @@
     | _ -> set_generator
              (Odoc_gen.Dot (module Odoc_dot.Generator : Odoc_dot.Dot_generator))),
     M.generate_dot ;
-  "-customdir", Arg.Unit (fun () -> Printf.printf "%s\n" Odoc_config.custom_generators_path; exit 0),
+  "-customdir", Arg.Unit (fun () ->
+    Misc.mingw_binary_output ();
+    Odoc_config.custom_generators_path |> Misc.slashify |> Printf.printf "%s\n" ;
+    exit 0),
   M.display_custom_generators_dir ;
   "-i", Arg.String (fun _ -> ()), M.add_load_dir ;
   "-g", Arg.String (fun _ -> ()), M.load_file ^
--- ./otherlibs/dynlink/Makefile
+++ ./otherlibs/dynlink/Makefile
@@ -92,7 +92,7 @@
 
 install:
 	$(INSTALL_DATA) \
-	  dynlink.cmi dynlink.cmti dynlink.cma dynlink.mli \
+	  dynlink.cmi dynlink.cmt dynlink.cmti dynlink.cma dynlink.mli \
 	  "$(INSTALL_LIBDIR)"
 	$(INSTALL_PROG) \
 	  extract_crc "$(INSTALL_LIBDIR)/extract_crc$(EXE)"
--- ./otherlibs/Makefile
+++ ./otherlibs/Makefile
@@ -88,7 +88,7 @@
 	cd "$(INSTALL_LIBDIR)"; $(RANLIB) lib$(CLIBNAME).$(A)
 	$(INSTALL_DATA) \
 	  $(LIBNAME).cma $(CMIFILES) $(CMIFILES:.cmi=.mli) \
-          $(CMIFILES:.cmi=.cmti) \
+          $(CMIFILES:.cmi=.cmt) $(CMIFILES:.cmi=.cmti) \
 	  "$(INSTALL_LIBDIR)/"
 	if test -n "$(HEADERS)"; then \
 	  $(INSTALL_DATA) $(HEADERS) "$(INSTALL_LIBDIR)/caml/"; \
--- ./otherlibs/systhreads/Makefile
+++ ./otherlibs/systhreads/Makefile
@@ -124,7 +124,7 @@
 	cd "$(INSTALL_LIBDIR)"; $(RANLIB) libthreads.$(A)
 	mkdir -p "$(INSTALL_THREADSLIBDIR)"
 	$(INSTALL_DATA) \
-	  $(CMIFILES) $(CMIFILES:.cmi=.cmti) threads.cma \
+	  $(CMIFILES) $(CMIFILES:.cmi=.cmt) $(CMIFILES:.cmi=.cmti) threads.cma \
 	  "$(INSTALL_THREADSLIBDIR)"
 	$(INSTALL_DATA) $(MLIFILES) "$(INSTALL_LIBDIR)"
 	$(INSTALL_DATA) threads.h "$(INSTALL_LIBDIR)/caml"
--- ./otherlibs/systhreads/st_stubs.c
+++ ./otherlibs/systhreads/st_stubs.c
@@ -775,7 +775,8 @@
   caml_mutex_compare,
   caml_mutex_hash,
   custom_serialize_default,
-  custom_deserialize_default
+  custom_deserialize_default,
+  custom_compare_ext_default
 };
 
 CAMLprim value caml_mutex_new(value unit)        /* ML */
--- ./otherlibs/threads/Makefile
+++ ./otherlibs/threads/Makefile
@@ -121,7 +121,7 @@
 	$(INSTALL_DATA) libvmthreads.a "$(INSTALL_LIBDIR)/vmthreads"
 	cd "$(INSTALL_LIBDIR)/vmthreads"; $(RANLIB) libvmthreads.a
 	$(INSTALL_DATA) \
-	  $(CMIFILES) $(CMIFILES:.cmi=.mli) $(CMIFILES:.cmi=.cmti) \
+	  $(CMIFILES) $(CMIFILES:.cmi=.mli) $(CMIFILES:.cmi=.cmt) $(CMIFILES:.cmi=.cmti) \
 	  threads.cma stdlib.cma unix.cma \
 	  "$(INSTALL_LIBDIR)/vmthreads"
 
--- ./otherlibs/win32unix/gettimeofday.c
+++ ./otherlibs/win32unix/gettimeofday.c
@@ -26,15 +26,22 @@
 {
   FILETIME ft;
   double tm;
-  GetSystemTimeAsFileTime(&ft);
 #if defined(_MSC_VER) && _MSC_VER < 1300
   /* This compiler can't cast uint64_t to double! Fortunately, this doesn't
      matter since SYSTEMTIME is only ever 63-bit (maximum value 31-Dec-30827
      23:59:59.999, and it requires some skill to set the clock past 2099!)
    */
-  tm = *(int64_t *)&ft - epoch_ft; /* shift to Epoch-relative time */
+  LARGE_INTEGER large;
+  GetSystemTimeAsFileTime(&ft);
+  large.LowPart=ft.dwLowDateTime;
+  large.HighPart=ft.dwHighDateTime;
+  tm = large.QuadPart - epoch_ft; /* shift to Epoch-relative time */
 #else
-  tm = *(uint64_t *)&ft - epoch_ft; /* shift to Epoch-relative time */
+  ULARGE_INTEGER ularge;
+  GetSystemTimeAsFileTime(&ft);
+  ularge.LowPart=ft.dwLowDateTime;
+  ularge.HighPart=ft.dwHighDateTime;
+  tm = ularge.QuadPart - epoch_ft; /* shift to Epoch-relative time */
 #endif
   return caml_copy_double(tm * 1e-7);  /* tm is in 100ns */
 }
--- ./otherlibs/win32unix/select.c
+++ ./otherlibs/win32unix/select.c
@@ -193,8 +193,8 @@
   res = (LPSELECTDATA)caml_stat_alloc(sizeof(SELECTDATA));
 
   /* Init common data */
-  list_init((LPLIST)res);
-  list_next_set((LPLIST)res, (LPLIST)lpSelectData);
+  caml_winlist_init((LPLIST)res);
+  caml_winlist_next_set((LPLIST)res, (LPLIST)lpSelectData);
   res->EType         = EType;
   res->nResultsCount = 0;
 
@@ -1155,7 +1155,7 @@
 
       /* Building the list of handle to wait for */
       DEBUG_PRINT("Building events done array");
-      nEventsMax   = list_length((LPLIST)lpSelectData);
+      nEventsMax   = caml_winlist_length((LPLIST)lpSelectData);
       nEventsCount = 0;
       lpEventsDone = (HANDLE *)caml_stat_alloc(sizeof(HANDLE) * nEventsMax);
 
--- ./otherlibs/win32unix/stat.c
+++ ./otherlibs/win32unix/stat.c
@@ -193,15 +193,16 @@
        *      reparse point allows a POSIX-compatible value to be returned in
        *      st_size
        */
-      char buffer[16384];
+      unsigned char mem_buffer[16384];
+      REPARSE_DATA_BUFFER* buffer = (REPARSE_DATA_BUFFER *)&mem_buffer[0];
       DWORD read;
       REPARSE_DATA_BUFFER* point;
 
       caml_enter_blocking_section();
       if (DeviceIoControl(h, FSCTL_GET_REPARSE_POINT, NULL, 0, buffer, 16384, &read, NULL)) {
-        if (((REPARSE_DATA_BUFFER*)buffer)->ReparseTag == IO_REPARSE_TAG_SYMLINK) {
+        if (buffer->ReparseTag == IO_REPARSE_TAG_SYMLINK) {
           is_symlink = do_lstat;
-          res->st_size = ((REPARSE_DATA_BUFFER*)buffer)->SymbolicLinkReparseBuffer.SubstituteNameLength / 2;
+          res->st_size = buffer->SymbolicLinkReparseBuffer.SubstituteNameLength / 2;
         }
       }
       caml_leave_blocking_section();
--- ./otherlibs/win32unix/winlist.c
+++ ./otherlibs/win32unix/winlist.c
@@ -18,39 +18,39 @@
 #include "winlist.h"
 #include <windows.h>
 
-void list_init (LPLIST lst)
+void caml_winlist_init (LPLIST lst)
 {
   lst->lpNext = NULL;
 }
 
-void list_cleanup (LPLIST lst)
+void caml_winlist_cleanup (LPLIST lst)
 {
   lst->lpNext = NULL;
 }
 
-void list_next_set (LPLIST lst, LPLIST next)
+void caml_winlist_next_set (LPLIST lst, LPLIST next)
 {
   lst->lpNext = next;
 }
 
-LPLIST list_next (LPLIST lst)
+LPLIST caml_winlist_next (LPLIST lst)
 {
   return lst->lpNext;
 }
 
-int list_length (LPLIST lst)
+int caml_winlist_length (LPLIST lst)
 {
   int length = 0;
   LPLIST iter = lst;
   while (iter != NULL)
   {
     length++;
-    iter = list_next(iter);
+    iter = caml_winlist_next(iter);
   };
   return length;
 }
 
-LPLIST list_concat (LPLIST lsta, LPLIST lstb)
+LPLIST caml_winlist_concat (LPLIST lsta, LPLIST lstb)
 {
   LPLIST res = NULL;
   LPLIST iter = NULL;
@@ -71,7 +71,7 @@
     while (iter != NULL)
     {
       iterPrev = iter;
-      iter = list_next(iter);
+      iter = caml_winlist_next(iter);
     };
     iterPrev->lpNext = lstb;
   };
--- ./otherlibs/win32unix/winlist.h
+++ ./otherlibs/win32unix/winlist.h
@@ -20,8 +20,8 @@
 
 /* Singly-linked list data structure.
  * To transform a C struct into a list structure, you must include
- * at first position of your C struct a "LIST lst" and call list_init
- * on this data structure.
+ * at first position of your C struct a "LIST lst" and call
+ * caml_winlist_init on this data structure.
  *
  * See winworker.c for example.
  */
@@ -33,23 +33,23 @@
 };
 
 /* Initialize list data structure */
-void list_init (LPLIST lst);
+void caml_winlist_init (LPLIST lst);
 
 /* Cleanup list data structure */
-void list_cleanup (LPLIST lst);
+void caml_winlist_cleanup (LPLIST lst);
 
 /* Set next element */
-void list_next_set (LPLIST lst, LPLIST next);
+void caml_winlist_next_set (LPLIST lst, LPLIST next);
 
 /* Return next element */
-LPLIST list_next (LPLIST);
+LPLIST caml_winlist_next (LPLIST);
 
-#define LIST_NEXT(T, e) ((T)(list_next((LPLIST)(e))))
+#define LIST_NEXT(T, e) ((T)(caml_winlist_next((LPLIST)(e))))
 
 /* Get the number of elements */
-int list_length (LPLIST);
+int caml_winlist_length (LPLIST);
 
 /* Concatenate two lists */
-LPLIST list_concat (LPLIST, LPLIST);
+LPLIST caml_winlist_concat (LPLIST, LPLIST);
 
 #endif /* _WINLIST_H */
--- ./otherlibs/win32unix/winworker.c
+++ ./otherlibs/win32unix/winworker.c
@@ -97,7 +97,7 @@
   LPWORKER lpWorker = NULL;
 
   lpWorker = (LPWORKER)caml_stat_alloc(sizeof(WORKER));
-  list_init((LPLIST)lpWorker);
+  caml_winlist_init((LPLIST)lpWorker);
   lpWorker->hJobStarted  = CreateEvent(NULL, TRUE, FALSE, NULL);
   lpWorker->hJobStop     = CreateEvent(NULL, TRUE, FALSE, NULL);
   lpWorker->hJobDone     = CreateEvent(NULL, TRUE, FALSE, NULL);
@@ -185,7 +185,7 @@
   DEBUG_PRINT("Workers running current/runnning max/waiting: %d/%d/%d",
       nWorkersCurrent,
       nWorkersMax,
-      list_length((LPLIST)lpWorkers));
+      caml_winlist_length((LPLIST)lpWorkers));
   ReleaseMutex(hWorkersMutex);
 
   if (lpWorkerFree == NULL)
@@ -195,7 +195,7 @@
   }
 
   /* Ensure that we don't get dangling pointer to old data. */
-  list_init((LPLIST)lpWorkerFree);
+  caml_winlist_init((LPLIST)lpWorkerFree);
   lpWorkerFree->lpJobUserData = NULL;
 
   /* Reset events */
@@ -214,18 +214,19 @@
 
   WaitForSingleObject(hWorkersMutex, INFINITE);
   DEBUG_PRINT("Testing if we are under the maximum number of running workers");
-  if (list_length((LPLIST)lpWorkers) < THREAD_WORKERS_MAX)
+  if (caml_winlist_length((LPLIST)lpWorkers) < THREAD_WORKERS_MAX)
   {
     DEBUG_PRINT("Saving this worker for future use");
     DEBUG_PRINT("Next: %x", ((LPLIST)lpWorker)->lpNext);
-    lpWorkers = (LPWORKER)list_concat((LPLIST)lpWorker, (LPLIST)lpWorkers);
+    lpWorkers = (LPWORKER)caml_winlist_concat((LPLIST)lpWorker,
+                                              (LPLIST)lpWorkers);
     bFreeWorker = FALSE;
   };
   nWorkersCurrent--;
   DEBUG_PRINT("Workers running current/runnning max/waiting: %d/%d/%d",
       nWorkersCurrent,
       nWorkersMax,
-      list_length((LPLIST)lpWorkers));
+      caml_winlist_length((LPLIST)lpWorkers));
   ReleaseMutex(hWorkersMutex);
 
   if (bFreeWorker)
--- ./stdlib/headernt.c
+++ ./stdlib/headernt.c
@@ -34,7 +34,7 @@
 char * default_runtime_name = RUNTIME_NAME;
 
 static
-#if _MSC_VER >= 1200
+#if defined(_MSC_VER) && _MSC_VER >= 1200
 __forceinline
 #else
 __inline
@@ -120,7 +120,7 @@
     write_console(errh, runtime);
     write_console(errh, L"\r\n");
     ExitProcess(2);
-#if _MSC_VER >= 1200
+#if defined(_MSC_VER) && _MSC_VER >= 1200
     __assume(0); /* Not reached */
 #endif
   }
@@ -143,7 +143,7 @@
     write_console(errh, runtime);
     write_console(errh, L"\r\n");
     ExitProcess(2);
-#if _MSC_VER >= 1200
+#if defined(_MSC_VER) && _MSC_VER >= 1200
     __assume(0); /* Not reached */
 #endif
   }
@@ -152,7 +152,7 @@
   GetExitCodeProcess(procinfo.hProcess , &retcode);
   CloseHandle(procinfo.hProcess);
   ExitProcess(retcode);
-#if _MSC_VER >= 1200
+#if defined(_MSC_VER) && _MSC_VER >= 1200
     __assume(0); /* Not reached */
 #endif
 }
@@ -175,14 +175,14 @@
     write_console(errh, truename);
     write_console(errh, L" not found or is not a bytecode executable file\r\n");
     ExitProcess(2);
-#if _MSC_VER >= 1200
+#if defined(_MSC_VER) && _MSC_VER >= 1200
     __assume(0); /* Not reached */
 #endif
   }
   CloseHandle(h);
   MultiByteToWideChar(CP, 0, runtime_path, -1, wruntime_path, sizeof(wruntime_path)/sizeof(wchar_t));
   run_runtime(wruntime_path , cmdline);
-#if _MSC_VER >= 1200
+#if defined(_MSC_VER) && _MSC_VER >= 1200
     __assume(0); /* Not reached */
 #endif
 #ifdef __MINGW32__
--- ./tools/objinfo.ml
+++ ./tools/objinfo.ml
@@ -247,10 +247,13 @@
   try
     try_finally
       (fun () ->
-        let rc = Sys.command (sprintf "%s %s > %s"
-                                (Filename.quote helper)
-                                (Filename.quote filename)
-                                tempfile) in
+        let cmd =
+          sprintf "%s %s > %s"
+            (Filename.quote helper)
+            (Filename.quote filename)
+            (Filename.quote tempfile) in
+        let cmd = if Sys.win32 then "\"" ^ cmd ^ "\"" else cmd in
+        let rc = Sys.command cmd in
         if rc <> 0 then failwith "cannot read";
         let tc = Scanf.Scanning.from_file tempfile in
         try_finally
--- ./tools/ocamlmklib.ml
+++ ./tools/ocamlmklib.ml
@@ -54,11 +54,13 @@
 exception Bad_argument of string
 
 let print_version () =
+  Misc.mingw_binary_output ();
   printf "ocamlmklib, version %s\n" Sys.ocaml_version;
   exit 0;
 ;;
 
 let print_version_num () =
+  Misc.mingw_binary_output ();
   printf "%s\n" Sys.ocaml_version;
   exit 0;
 ;;
--- ./tools/ocamlprof.ml
+++ ./tools/ocamlprof.ml
@@ -479,11 +479,13 @@
 let usage = "Usage: ocamlprof <options> <files>\noptions are:"
 
 let print_version () =
+  Misc.mingw_binary_output ();
   printf "ocamlprof, version %s@." Sys.ocaml_version;
   exit 0;
 ;;
 
 let print_version_num () =
+  Misc.mingw_binary_output ();
   printf "%s@." Sys.ocaml_version;
   exit 0;
 ;;
--- ./toplevel/opttopmain.ml
+++ ./toplevel/opttopmain.ml
@@ -76,11 +76,13 @@
     end
 
 let print_version () =
+  Misc.mingw_binary_output ();
   Printf.printf "The OCaml toplevel, version %s\n" Sys.ocaml_version;
   exit 0;
 ;;
 
 let print_version_num () =
+  Misc.mingw_binary_output ();
   Printf.printf "%s\n" Sys.ocaml_version;
   exit 0;
 ;;
--- ./toplevel/topmain.ml
+++ ./toplevel/topmain.ml
@@ -79,11 +79,13 @@
     end
 
 let print_version () =
+  Misc.mingw_binary_output ();
   Printf.printf "The OCaml toplevel, version %s\n" Sys.ocaml_version;
   exit 0;
 ;;
 
 let print_version_num () =
+  Misc.mingw_binary_output ();
   Printf.printf "%s\n" Sys.ocaml_version;
   exit 0;
 ;;
--- ./utils/ccomp.ml
+++ ./utils/ccomp.ml
@@ -15,7 +15,107 @@
 
 (* Compiling C files and building C libraries *)
 
-let command cmdline =
+
+let is_space = function
+| ' ' | '\n' | '\t' | '\r' | '\x0b' -> true
+| _ -> false
+
+(* characters that triggers special behaviour (cmd.exe, not unix shell) *)
+let is_unsafe_char = function
+| '(' | ')' | '%' | '!' | '^' | '<' | '>' | '&' -> true
+| _ -> false
+
+
+(* external commands are unfortunately called called with cmd.exe
+ * (via Sys.command).
+ * Cmd.exe has strange quoting rules. The most notorious quirk is, that
+ * you can't use forward slashes as path separators at the first position,
+ * unless you quote the expression explicitly.
+ * cmd.exe will interpret the slash and everything thereafter as first
+ * parameter. Eg. 'bin/foo -x' is treated like 'bin /foo -x'.
+ * Because the most used build tools are unix-centric (ocamlbuild, gmake)
+ * and are not aware of it, such errors are quite common, especially when
+ * calling the preprocessor. ( ocamlc -pp 'subdir/exe' ... )
+ *
+ * Therefore, I replace every slash inside the first subexpression with a
+ * backslash.
+ * I think this replacement is safe. No OCaml developer will write 'bin/foo',
+ * if he wants to call a executable 'bin' with parameter /foo.
+ *)
+
+let replace s =
+  let module T = struct exception Use_original end in
+  let open T in
+  let len = String.length s in
+  let b = Buffer.create ( (len/2) * 3 ) in
+  let modified = ref false in
+  let rec f i =
+    if i = len then
+      if !modified = false then
+        raise Use_original
+      else
+        Buffer.contents b
+    else
+      let c = s.[i] in
+      (* quoted expression are left untouched,
+       * ' is not really a quote symbol, but presumably
+       * intended as such *)
+      if  c = '\'' || c = '"' then
+        raise Use_original
+      else if c = '/' then (
+        Buffer.add_char b '\\' ;
+        modified := true;
+        f (succ i)
+      )
+      else if is_space c then
+        if !modified then
+          (Buffer.contents b) ^
+          (String.sub s i (len - i ) )
+        else
+          raise Use_original
+      (* probably a syntax error, don't modify it and let the shell
+         complain *)
+      else if is_unsafe_char c then
+        raise Use_original
+      else (
+        Buffer.add_char b c ;
+        f (succ i)
+      )
+  in
+  (* ignore leading whitespace *)
+  let rec ws i =
+    if i = len then
+      raise Use_original
+    else
+      let c = s.[i] in
+      if is_space c then (
+        Buffer.add_char b c ;
+        ws (succ i)
+      )
+      else
+        f i
+  in
+  try
+    ws 0
+  with
+  | Use_original -> s
+
+
+let replace s =
+  if Sys.os_type <> "Win32" then
+    s
+  else
+    let n = try Sys.getenv "OCAML_NO_CMD_HACK" with Not_found -> "" in
+    if n = "" then
+      replace s
+    else
+      match n.[0] with
+      | 'n' | 'N' | '0' | 'f' | 'F' -> replace s
+      | _ -> s
+
+
+let command cmdline' =
+  let cmdline = replace cmdline' in
   if !Clflags.verbose then begin
     prerr_string "+ ";
     prerr_string cmdline;
--- ./utils/config.mlp
+++ ./utils/config.mlp
@@ -17,16 +17,25 @@
 (* The main OCaml version string has moved to ../VERSION *)
 let version = Sys.ocaml_version
 
-let standard_library_default = "%%LIBDIR%%"
+let system = "%%SYSTEM%%"
+
+let slashify =
+  if Sys.win32 then
+    fun s -> String.map ( fun x -> if x = '\\' then '/' else x ) s
+  else
+    fun id -> id
+
+let standard_library_default = slashify ( "%%LIBDIR%%" )
 
 let standard_library =
+  slashify (
   try
     Sys.getenv "OCAMLLIB"
   with Not_found ->
   try
     Sys.getenv "CAMLLIB"
   with Not_found ->
-    standard_library_default
+    standard_library_default )
 
 let standard_runtime = "%%BYTERUN%%"
 let ccomp_type = "%%CCOMPTYPE%%"
@@ -119,7 +128,6 @@
 
 let architecture = "%%ARCH%%"
 let model = "%%MODEL%%"
-let system = "%%SYSTEM%%"
 
 let asm = "%%ASM%%"
 let asm_cfi_supported = %%ASM_CFI_SUPPORTED%%
--- ./utils/misc.ml
+++ ./utils/misc.ml
@@ -732,3 +732,15 @@
   let apply_hooks sourcefile intf =
     fold_hooks !hooks sourcefile intf
 end
+
+let mingw_binary_output () =
+  if Sys.win32 then (
+    (try set_binary_mode_out stdout true with _ -> ());
+    (try set_binary_mode_out stderr true with _ -> ());
+  )
+
+let slashify = (* copy & paste from config.ml for easier rebase ... *)
+  if Sys.win32 then
+    fun s -> String.map ( fun x -> if x = '\\' then '/' else x ) s
+  else
+    fun id -> id
--- ./utils/misc.mli
+++ ./utils/misc.mli
@@ -347,3 +347,6 @@
 end
 
 module MakeHooks : functor (M : sig type t end) -> HookSig with type t = M.t
+
+val mingw_binary_output : unit -> unit
+val slashify: string -> string
--- ./yacc/main.c
+++ ./yacc/main.c
@@ -21,6 +21,9 @@
 #ifdef HAS_UNISTD
 #include <unistd.h>
 #endif
+#ifdef _WIN32
+#include <io.h>
+#endif
 
 #include "version.h"
 
@@ -98,8 +101,12 @@
 char *nullable;
 
 #if !defined(HAS_MKSTEMP)
+#ifdef _WIN32
+#define mktemp _mktemp
+#else
 extern char *mktemp(char *);
 #endif
+#endif
 
 
 void done(int k)
@@ -156,6 +163,18 @@
     exit(1);
 }
 
+#if defined(_WIN32) || defined(__CYGWIN__)
+#include <io.h>
+#include <fcntl.h>
+#include <stdio.h>
+static void binary_stdout(void)
+{
+  _setmode(_fileno(stdout),O_BINARY);
+}
+#else
+#define binary_stdout() do{}while(0)
+#endif
+
 void getargs(int argc, char **argv)
 {
     register int i;
@@ -184,10 +203,12 @@
 
         case 'v':
             if (!strcmp (argv[i], "-version")){
+              binary_stdout();
               printf ("The OCaml parser generator, version "
                       OCAML_VERSION "\n");
               exit (0);
             }else if (!strcmp (argv[i], "-vnum")){
+              binary_stdout();
               printf (OCAML_VERSION "\n");
               exit (0);
             }else{
